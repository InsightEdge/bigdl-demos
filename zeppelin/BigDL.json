{"paragraphs":[{"text":"%dep\nz.load(\"/code/BigDL/dist/lib/bigdl-0.2.0-SNAPSHOT-jar-with-dependencies.jar\")\n","dateUpdated":"2017-07-28T16:36:54+0300","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1499717872757_1416192723","id":"20170710-231752_424871974","dateCreated":"2017-07-10T11:17:52+0300","dateStarted":"2017-07-28T16:09:31+0300","dateFinished":"2017-07-28T16:09:37+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:187","errorMessage":"","focus":true},{"text":"%spark\n\nimport com.intel.analytics.bigdl.tensor.Tensor\n\nTensor[Double](2,2).fill(1.0)\n","dateUpdated":"2017-07-28T16:36:20+0300","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":false,"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1499717902810_349530854","id":"20170710-231822_1896684066","dateCreated":"2017-07-10T11:18:22+0300","dateStarted":"2017-07-28T12:20:47+0300","dateFinished":"2017-07-28T12:20:56+0300","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:189"},{"text":"%spark\n\nimport com.intel.analytics.bigdl.example.utils._\nimport scopt.OptionParser\nimport org.apache.log4j.{Level => Levle4j, Logger => Logger4j, ConsoleAppender, Layout, PatternLayout}\nimport java.io.OutputStream\nimport java.io.{PrintStream,IOException, InterruptedIOException}\n\nval localParser = new OptionParser[TextClassificationParams](\"BigDL Example\") {\n    opt[String]('b', \"baseDir\")\n        .required()\n        .text(\"Base dir containing the training and word2Vec data\")\n        .action((x, c) => c.copy(baseDir = x))\n     opt[String]('p', \"partitionNum\")\n        .text(\"you may want to tune the partitionNum if run into spark mode\")\n        .action((x, c) => c.copy(partitionNum = x.toInt))\n     opt[String]('s', \"maxSequenceLength\")\n        .text(\"maxSequenceLength\")\n        .action((x, c) => c.copy(maxSequenceLength = x.toInt))\n     opt[String]('w', \"maxWordsNum\")\n        .text(\"maxWordsNum\")\n        .action((x, c) => c.copy(maxWordsNum = x.toInt))\n     opt[String]('l', \"trainingSplit\")\n        .text(\"trainingSplit\")\n        .action((x, c) => c.copy(trainingSplit = x.toDouble))\n     opt[String]('z', \"batchSize\")\n        .text(\"batchSize\")\n        .action((x, c) => c.copy(batchSize = x.toInt))\n}\n\nclass ZeppelinAppender extends ConsoleAppender {\n\n  private var _os: Option[OutputStream] = None\n\n  override def activateOptions(): Unit = {\n    _os.foreach(os => setWriter(createWriter(os)))\n\n  }\n\n  def setOutputStream(os: OutputStream): Unit = {\n    // if (_os.isEmpty) \n    _os = Some(os)\n  }\n}\n\nval zeppelinAppender = new ZeppelinAppender\n\n","dateUpdated":"2017-07-28T16:17:45+0300","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1499718414822_876356078","id":"20170710-232654_1513871320","dateCreated":"2017-07-10T11:26:54+0300","dateStarted":"2017-07-28T16:09:58+0300","dateFinished":"2017-07-28T16:10:07+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:190","errorMessage":"","focus":true},{"text":"%spark\n\n\n\nlog.debug(\"de\")\nlog.info(\"Hello\")\nlog.error(\"er\")\nval log2: Logger = LoggerFactory.getLogger(\"com.intel.analytics.bigdl.optim\")\n\nlog2.debug(\"de\")\nlog2.info(\"Hello\")\nlog2.error(\"er\")\n\n// import com.intel.analytics.bigdl.utils.LoggerFilter._\nimport org.apache.log4j.{ConsoleAppender, PatternLayout}\n\nval pattern = \"%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n\"\n\n   def classLogToAppender(className: String, appender: Appender): Unit = {\n    Logger4j.getLogger(className).addAppender(appender)\n  }\n\n   def consoleAppender(level: Levle4j = Levle4j.INFO): ConsoleAppender = {\n    val console = new ConsoleAppender\n    console.setLayout(new PatternLayout(pattern))\n    console.setThreshold(level)\n    console.activateOptions()\n    console.setTarget(\"System.out\")\n\n    console\n  }\n\n\nclassLogToAppender(this.getClass.getName, consoleAppender(Levle4j.DEBUG))\n\n val log3: Logger = LoggerFactory.getLogger(this.getClass)\nlog3.debug(\"de\")\nlog3.info(\"Hello\")\nlog3.error(\"er\")\n\nSystem.out.println(\"ffuuu\")\n\nprintln(\"hehe\")\n\n\n// System.out.write(\"asd\".getBytes)\n// System.out.flush()","dateUpdated":"2017-07-28T13:58:19+0300","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":false,"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1499723037654_-1810561150","id":"20170711-004357_951180299","dateCreated":"2017-07-11T12:43:57+0300","dateStarted":"2017-07-18T05:36:22+0300","dateFinished":"2017-07-18T05:36:30+0300","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:191"},{"text":"%spark\n\n\nval logger = Logger4j.getLogger(\"com.intel\")\nlogger.removeAppender(zeppelinAppender)\nlogger.setLevel(Levle4j.INFO)\n\nval pattern = \"%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n\"\nzeppelinAppender.setOutputStream(z.getInterpreterContext().out)\nzeppelinAppender.setLayout(new PatternLayout(pattern))\nzeppelinAppender.setThreshold(Levle4j.INFO)\nzeppelinAppender.activateOptions()\n\nlogger.addAppender(zeppelinAppender)\nlogger.info(\"IT MUST BE VISIBLE\")\n\n\n// System.setErr(new ZeppelinPrintStream(z.getInterpreterContext().out))\n\nval args = Array(\"--batchSize\", \"128\", \"--baseDir\", \"/home/dgurin/code/intel-bigdl-xap-demo/textclassification-data\", \"--partitionNum\", \"4\")\nlocalParser.parse(args, TextClassificationParams()).map { param =>\n      logger.info(s\"Current parameters: $param\")\n      val textClassification = new TextClassifier(param)\n      textClassification.train()\n}","dateUpdated":"2017-07-28T16:10:20+0300","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1499725956298_-649202388","id":"20170711-013236_887066301","dateCreated":"2017-07-11T01:32:36+0300","dateStarted":"2017-07-28T16:10:20+0300","dateFinished":"2017-07-28T16:13:35+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:192","errorMessage":"","focus":true},{"dateUpdated":"2017-07-28T13:58:19+0300","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1501159558693_328455544","id":"20170727-154558_1501219947","dateCreated":"2017-07-27T03:45:58+0300","dateStarted":"2017-07-28T13:58:38+0300","dateFinished":"2017-07-28T13:59:26+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:193","errorMessage":"","focus":true}],"name":"BigDL","id":"2CNH7K23C","angularObjects":{"2CMHTH72N:shared_process":[],"2CNV47127:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}